/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.MCQ_Counter;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class MCQ_Counter extends javax.swing.JFrame {

    static String institute, sapNumber, date, fileNameAndPath, name;
    int[][] qTotal = new int[50][2];
    int[][] dupliCheck = new int[50][2];
    int numTyped, paperCount, xMouse, yMouse, i = 0, j = 0, k = 0, tablei = 0, tablek = 0;
    static int marks;
    String stringTyped;
    ImageIcon img = new ImageIcon(getClass().getResource("/icons/MCQ.png"));

    /**
     * Creates new form MCQ
     */
    public MCQ_Counter() {
        initComponents();
        this.setLocationRelativeTo(null);
        StartForm form = new StartForm();
        institute = form.returnInstitute();
        sapNumber = form.returnSapNumber();
        date = form.returnDate();

        numberField1.requestFocusInWindow();
        fileNameAndPath = form.returnFileNameAndPath();
        name = form.returnName();
        if (form.returnLoadPressed()) {
            qTotal = form.returnQTotal();
            paperCount = form.returnPaperCount();
        } else {
            paperCount = 0;
            for (; i < 50; i++) {
                qTotal[i][0] = i + 1;
                qTotal[i][1] = 0;
            }
        }
        numOfPapersLable.setText(String.valueOf(paperCount));
        marks = 0;
        marksLable.setText(String.valueOf(marks) + "%");

        displayLabel.setText(name + "- Report of " + institute + " Institute SAP " + sapNumber + " MCQ");

        i = 0;
        // dupliCheck array is there to identify whether a mcq is assigned correct or incorrect in a paper. So it get reseted each time pressing the nexxt paper button
        for (; i < 50; i++) {
            dupliCheck[i][0] = i + 1;
            dupliCheck[i][1] = 0;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        displayLabel = new javax.swing.JLabel();
        qNumberLabel = new javax.swing.JLabel();
        numberField1 = new javax.swing.JTextField();
        finishButton = new javax.swing.JButton();
        nextPaperButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        marksLable = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        numOfPapersLable = new javax.swing.JLabel();
        numberField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(img.getImage());
        setUndecorated(true);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jScrollPane1.setForeground(new java.awt.Color(0, 0, 0));

        table.setForeground(new java.awt.Color(0, 0, 0));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question Number", "Correct / Incorrect"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setFocusable(false);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
        }

        displayLabel.setBackground(new java.awt.Color(102, 204, 255));
        displayLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        displayLabel.setForeground(new java.awt.Color(0, 0, 0));
        displayLabel.setText("Report of *");

        qNumberLabel.setBackground(new java.awt.Color(255, 255, 255));
        qNumberLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        qNumberLabel.setForeground(new java.awt.Color(0, 0, 0));
        qNumberLabel.setText("        Correct Question Number /s");

        numberField1.setBackground(new java.awt.Color(204, 204, 204));
        numberField1.setForeground(new java.awt.Color(0, 0, 0));
        numberField1.setToolTipText("<html>\n<p> <strong>\"Tab\" key</strong>     --> \"Last MCQ\" Field </p>\n<p> <strong>\"Space\" key</strong> --> \"Next Paper\" Button </p>\n<p><strong> \"Esc\" key  </strong>    --> \"Finish\" Button </p>\n</html>");
        numberField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberField1ActionPerformed(evt);
            }
        });
        numberField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numberField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberField1KeyTyped(evt);
            }
        });

        finishButton.setBackground(new java.awt.Color(255, 51, 51));
        finishButton.setForeground(new java.awt.Color(0, 0, 0));
        finishButton.setText("Finish");
        finishButton.setToolTipText("<html>\n<p>press <strong>\"Esc\" key  </strong> to go back to \"First MCQ\" Field </p>\n</html>");
        finishButton.setFocusable(false);
        finishButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finishButtonMouseClicked(evt);
            }
        });
        finishButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                finishButtonKeyPressed(evt);
            }
        });

        nextPaperButton.setBackground(new java.awt.Color(102, 255, 0));
        nextPaperButton.setForeground(new java.awt.Color(0, 0, 0));
        nextPaperButton.setText("Next Paper");
        nextPaperButton.setToolTipText("<html>\n<p>press <strong>\"Space\" key  </strong> to go back to \"First MCQ\" Field </p>\n</html>");
        nextPaperButton.setFocusable(false);
        nextPaperButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextPaperButtonMouseClicked(evt);
            }
        });
        nextPaperButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nextPaperButtonKeyPressed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Marks for this Paper");

        marksLable.setBackground(new java.awt.Color(204, 204, 204));
        marksLable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        marksLable.setForeground(new java.awt.Color(0, 0, 0));
        marksLable.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Number of Papers");

        numOfPapersLable.setBackground(new java.awt.Color(204, 204, 204));
        numOfPapersLable.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        numOfPapersLable.setForeground(new java.awt.Color(0, 0, 0));
        numOfPapersLable.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        numberField2.setBackground(new java.awt.Color(204, 204, 204));
        numberField2.setForeground(new java.awt.Color(0, 0, 0));
        numberField2.setToolTipText("<html>\n<p> <strong>\"Tab\" key</strong>     --> \"First MCQ\" Field </p>\n<p> <strong>\"Space\" key</strong> --> \"Next Paper\" Button </p>\n<p><strong> \"Esc\" key  </strong>    --> \"Finish\" Button </p>\n</html>");
        numberField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberField2ActionPerformed(evt);
            }
        });
        numberField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numberField2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberField2KeyTyped(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("      First MCQ");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("     Last MCQ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(finishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextPaperButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numberField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numberField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(marksLable, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numOfPapersLable, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(qNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 90, Short.MAX_VALUE)))
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(displayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numberField2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(numberField1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qNumberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(marksLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numOfPapersLable, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finishButton)
                    .addComponent(nextPaperButton))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numberField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberField1ActionPerformed
        // TODO add your handling code here:
        try {
            numTyped = Integer.valueOf(numberField1.getText());
            i = numTyped - 1;
            if ((numTyped > 50) || (numTyped == 0)) {
                JOptionPane.showMessageDialog(null, "The inputs can not exceed 50 nor subceed 1", "Eror", 2);
            } else {
                thingThatDoesWhenOnlyOneNumberTyped(i);
            }
        } catch (NumberFormatException ex) {
            if (numberField1.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "The Number field is empty", "Eror", 2);
                i = table.getRowCount() - 1;
            }
        }

        marksLable.setText(String.valueOf(marks) + "%");

        numberField1.setText("");
        numberField2.setText("");

        //select the the last changed row
        table.getSelectionModel().setSelectionInterval(i, i);
        scrollToVisible(table, i, 0);

        //get the last changed row to the viewport
        Rectangle cellBounds = table.getCellRect(i, 0, true);
        table.scrollRectToVisible(cellBounds);
    }//GEN-LAST:event_numberField1ActionPerformed

    private void numberField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberField1KeyTyped
        // TODO add your handling code here:        
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_numberField1KeyTyped

    public static void scrollToVisible(JTable table, int rowIndex, int vColIndex) {
        table.scrollRectToVisible(table.getCellRect(rowIndex, vColIndex, true));
    }

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_formMouseDragged

    private void numberField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberField2ActionPerformed
        // TODO add your handling code here:
        try {
            i = Integer.valueOf(numberField1.getText()) - 1;
            tablei = i;
            k = Integer.valueOf(numberField2.getText()) - 1;
            tablek = k;

            if (i > 49 || i == -1 || k > 49 || k == -1) {
                JOptionPane.showMessageDialog(null, "The inputs can not exceed 50 nor subceed 1", "Eror", 2);
            } else {
                if (i > k) {
                    JOptionPane.showMessageDialog(null, "'First MCQ' should be always equal or lesser than the 'Last MCQ'\n(First MCQ <= Last MCQ)", "Eror", 2);
                } else {
                    for (; i <= k; i++) {
                        thingThatDoesWhenOnlyOneNumberTyped(i);
                    }
                }
            }
        } catch (NumberFormatException e) {
            if (numberField1.getText().equals("") || numberField2.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "If you press Enter while in the 'Last MCQ' field,\nthen both MCQ fields must not be empty", "Eror", 2);
                i = table.getRowCount() - 1;
                k = i;
            }
        }
        marksLable.setText(String.valueOf(marks) + "%");

        numberField1.setText("");
        numberField2.setText("");

        //select the the last changed row
        table.getSelectionModel().setSelectionInterval(tablei, tablek);
        scrollToVisible(table, tablek, 0);

        //get the last changed row to the viewport
        Rectangle cellBounds = table.getCellRect(tablei, 0, true);
        table.scrollRectToVisible(cellBounds);

        numberField1.requestFocusInWindow();
    }//GEN-LAST:event_numberField2ActionPerformed

    public void thingThatDoesWhenOnlyOneNumberTyped(int i) {
        if (table.getRowCount() > 0) {
            //changing already entered correct mcq's to incorrect
            if (dupliCheck[i][1] == 1) {
                table.setValueAt("Incorrect", i, 1);
                qTotal[i][1]--;
                dupliCheck[i][1] = 0;
                marks -= 2;

            } else {
                j = Integer.parseInt(String.valueOf(table.getValueAt(table.getRowCount() - 1, 0)));
                dupliCheck[i][1] = 1;
                qTotal[i][1]++;
                marks += 2;
                if (i == j) {
                    tableRowAdder(i, "Correct");
                }
                if (i > j) {
                    for (; j < i; j++) {
                        tableRowAdder(j, "Incorrect");
                    }
                    tableRowAdder(i, "Correct");
                }
                if (i < j) {
                    table.setValueAt("Correct", i, 1);
                }
            }
        } else {
            j = 0;
            qTotal[i][1]++;
            dupliCheck[i][1] = 1;
            marks += 2;
            if (i == j) {
                tableRowAdder(i, "Correct");
            }
            if (i > j) {
                for (; j < i; j++) {
                    tableRowAdder(j, "Incorrect");
                }
                tableRowAdder(i, "Correct");
            }
        }
        System.out.println(qTotal[i][0] + " " + qTotal[i][1]);
        System.out.println(dupliCheck[i][0] + " " + dupliCheck[i][1]);
    }

    public void tableRowAdder(int I, String CorrectOrIncorrect) {
        String tableData1[] = {String.valueOf(qTotal[I][0]), CorrectOrIncorrect};
        DefaultTableModel tableModel1 = (DefaultTableModel) table.getModel();
        tableModel1.addRow(tableData1);
    }

    private void numberField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberField2KeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_numberField2KeyTyped

    private void numberField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberField1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            nextPaperButton.setFocusable(true);
            nextPaperButton.requestFocus();
            numberField1.setFocusable(false);
            numberField2.setFocusable(false);
        }

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            finishButton.setFocusable(true);
            finishButton.requestFocus();
            numberField1.setFocusable(false);
            numberField2.setFocusable(false);
        }
    }//GEN-LAST:event_numberField1KeyPressed

    private void nextPaperButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextPaperButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            dtm.setRowCount(0);
            marks = 0;
            marksLable.setText(String.valueOf(marks) + "%");
            paperCount++;
            i = 0;
            j = 0;
            for (; i < 50; i++) {
                dupliCheck[i][0] = i + 1;
                dupliCheck[i][1] = 0;
            }
            numOfPapersLable.setText(String.valueOf(paperCount));
            numberField2.setFocusable(true);
            numberField1.setFocusable(true);
            numberField1.requestFocusInWindow();
            nextPaperButton.setFocusable(false);
            finishButton.setFocusable(false);
        }

        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            numberField2.setFocusable(true);
            numberField1.setFocusable(true);
            numberField1.requestFocus();
            nextPaperButton.setFocusable(false);
            finishButton.setFocusable(false);
        }
    }//GEN-LAST:event_nextPaperButtonKeyPressed

    private void nextPaperButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextPaperButtonMouseClicked
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        dtm.setRowCount(0);
        marks = 0;
        marksLable.setText(String.valueOf(marks) + "%");
        paperCount++;
        i = 0;
        j = 0;
        for (; i < 50; i++) {
            dupliCheck[i][0] = i + 1;
            dupliCheck[i][1] = 0;
        }
        numOfPapersLable.setText(String.valueOf(paperCount));

        numberField2.setFocusable(true);
        numberField1.setFocusable(true);
        numberField1.requestFocusInWindow();
        nextPaperButton.setFocusable(false);
        finishButton.setFocusable(false);
    }//GEN-LAST:event_nextPaperButtonMouseClicked

    private void numberField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberField2KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            nextPaperButton.setFocusable(true);
            nextPaperButton.requestFocus();
            numberField1.setFocusable(false);
            numberField2.setFocusable(false);
        }

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            finishButton.setFocusable(true);
            finishButton.requestFocus();
            numberField1.setFocusable(false);
            numberField2.setFocusable(false);
        }
    }//GEN-LAST:event_numberField2KeyPressed

    private void finishButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finishButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                FileWriter Writer = new FileWriter(fileNameAndPath, true);
                for (i = 0; i < 50; i++) {
                    Writer.write(qTotal[i][0] + "   " + qTotal[i][1] + "\n");
                }
                if (paperCount == 0 && String.valueOf(table.getRowCount()).equals("0")) {
                    Writer.write("\n" + paperCount + " Papers");
                }
                if (paperCount == 0 && !String.valueOf(table.getRowCount()).equals("0")) {
                    Writer.write("\n" + ++paperCount + " Paper");
                    paperCount--;
                }
                if (!(paperCount == 0) && String.valueOf(table.getRowCount()).equals("0")) {
                    Writer.write("\n" + paperCount + " Papers");
                }
                if (!(paperCount == 0) && !String.valueOf(table.getRowCount()).equals("0")) {
                    Writer.write("\n" + ++paperCount + " Papers");
                }
                Writer.close();
                StartForm form = new StartForm();
                if (form.returnLoadPressed()) {
                    JOptionPane.showMessageDialog(null, "Report successfully updated.", "Message", 1);

                } else {
                    JOptionPane.showMessageDialog(null, "Report successfully created.", "Message", 1);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "An error has occurred.", "Eror", 2);
                e.printStackTrace();
            }
            closeWindow();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            numberField2.setFocusable(true);
            numberField1.setFocusable(true);
            numberField1.requestFocus();
            finishButton.setFocusable(false);
        }
    }//GEN-LAST:event_finishButtonKeyPressed

    private void finishButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finishButtonMouseClicked
        // TODO add your handling code here:
        try {
            FileWriter Writer = new FileWriter(fileNameAndPath, true);
            for (i = 0; i < 50; i++) {
                Writer.write(qTotal[i][0] + "   " + qTotal[i][1] + "\n");
            }
            if (paperCount == 0 && String.valueOf(table.getRowCount()).equals("0")) {
                Writer.write("\n" + paperCount + " Papers");
            }
            if (paperCount == 0 && !String.valueOf(table.getRowCount()).equals("0")) {
                Writer.write("\n" + ++paperCount + " Paper");
                paperCount--;
            }
            if (!(paperCount == 0) && String.valueOf(table.getRowCount()).equals("0")) {
                Writer.write("\n" + paperCount + " Papers");
            }
            if (!(paperCount == 0) && !String.valueOf(table.getRowCount()).equals("0")) {
                Writer.write("\n" + ++paperCount + " Papers");
            }
            Writer.close();
            StartForm form = new StartForm();
            if (form.returnLoadPressed()) {
                JOptionPane.showMessageDialog(null, "Report successfully updated.", "Message", 1);

            } else {
                JOptionPane.showMessageDialog(null, "Report successfully created.", "Message", 1);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "An error has occurred.", "Eror", 2);
            e.printStackTrace();
        }
        closeWindow();
    }//GEN-LAST:event_finishButtonMouseClicked

    public void closeWindow() {
        StartForm form = new StartForm();
        form.setVisible(true);
        form.pack();
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MCQ_Counter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MCQ_Counter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MCQ_Counter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MCQ_Counter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MCQ_Counter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel displayLabel;
    private javax.swing.JButton finishButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel marksLable;
    private javax.swing.JButton nextPaperButton;
    private javax.swing.JLabel numOfPapersLable;
    private javax.swing.JTextField numberField1;
    private javax.swing.JTextField numberField2;
    private javax.swing.JLabel qNumberLabel;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
